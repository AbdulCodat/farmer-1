<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Farmer</title>
    <link>https://compositionalit.github.io/farmer/</link>
    <description>Recent content on Farmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 04 Feb 2020 00:36:21 +0100</lastBuildDate>
    
	<atom:link href="https://compositionalit.github.io/farmer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generating templates</title>
      <link>https://compositionalit.github.io/farmer/api-overview/writer/</link>
      <pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/writer/</guid>
      <description>Farmer supports several ways to &amp;ldquo;output&amp;rdquo; ARM templates.
Generating JSON as a string You can generate an ARM template as a plain string:
let json =deployment.Template|&amp;gt; Writer.toJson// prints out the JSON printfn &amp;#34;%s&amp;#34; jsonWriting to a file You can also write out the JSON directly to a file:
deployment|&amp;gt; Writer.quickWrite &amp;#34;myTemplate&amp;#34; Notice how we use F#&amp;lsquo;s pipe operator to &amp;ldquo;pipe&amp;rdquo; data from the template configuration into json before writing to a file.</description>
    </item>
    
    <item>
      <title>Storage Account</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/storage-account/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/storage-account/</guid>
      <description>Overview The Storage Account builder creates storage accounts and their associated containers.
 Storage Accounts (Microsoft.Storage/storageAccounts) Storage Containers (blobServices/containers)  Builder Keywords    Keyword Purpose     name Specifies the name of the storage account   sku Sets the SKU of the storage account   add_public_container Adds a general-purpose public storage container   add_private_container Adds a general-purpose private storage container   add_blob_container Adds a general-purpose private blob container    Configuration Members    Member Purpose     Key Returns an ARM expression to retrieve the storage account&amp;rsquo;s primary connection string.</description>
    </item>
    
    <item>
      <title>Your first Farmer template</title>
      <link>https://compositionalit.github.io/farmer/quickstarts/quickstart-1/</link>
      <pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-1/</guid>
      <description>Introduction In this exercise, you&amp;rsquo;ll:
 create a web application with a fully-configured Application Insights instance create an ARM deployment object and assign the web app to it generate an ARM template  Creating a Farmer app Create an F# console application using the .NET SDK and add the Farmer package in an empty directory:
dotnet new console -lang F#dotnet add package Farmer Farmer also has a .NET template to get started even more quickly!</description>
    </item>
    
    <item>
      <title>Web App</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/web-app/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/web-app/</guid>
      <description>Overview The Web App builder is used to create Azure App Service accounts. It abstracts the Service Plan into the same component, and will also create and configure a linked App Insights resource.
 Web Site (Microsoft.Web/sites) Web Host (Microsoft.Web/serverfarms) Application Insights (Microsoft.Insights/components) Site Extension (siteextensions)  Builder Keywords    Keyword Purpose     name Sets the name of the web app.   service_plan_name Sets the name of the service plan.</description>
    </item>
    
    <item>
      <title>Working with multiple resources</title>
      <link>https://compositionalit.github.io/farmer/quickstarts/quickstart-2/</link>
      <pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-2/</guid>
      <description>Introduction In this quickstart, you&amp;rsquo;ll expand on the deployment authored in the previous quickstart as follows:
 add an Azure storage account add an application setting to the web app that references the storage account&amp;rsquo;s key set a dependency between the two resources  Creating a storage account Create a storage account by using the storageAccount builder.
let myStorage = storageAccount {name &amp;#34;yourfirststorage&amp;#34;} Azure Storage Account names must be globally unique and between 3-24 alphanumeric lower-case characters:</description>
    </item>
    
    <item>
      <title>Parameters and Variables</title>
      <link>https://compositionalit.github.io/farmer/api-overview/parameters/</link>
      <pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/parameters/</guid>
      <description>ARM templates support the idea both of parameterisation of templates and of the use of variables within a template for e.g. placeholders and re-using values.
Farmer, by design, has only limited support for parameters and no support for variables. We don&amp;rsquo;t plan on adding rich support for either of these for the following reasons:
 We want to keep the Farmer codebase simple for maintainers We want to keep the Farmer API simple for users We want to keep the generated ARM templates as readable as possible We feel that instead of trying to embed conditional logic and program flow directly inside ARM templates in JSON, if you wish to parameterise your template that you should use a real programming language to do that: in this case, F#.</description>
    </item>
    
    <item>
      <title>App Insights</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/app-insights/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/app-insights/</guid>
      <description>Overview The App Insights builder is used to create Application Insights accounts. Use this if you need a standalone AI instance; if you need one for a web app, the web app will create one by default and configure the application settings automatically.
 Application Insights (Microsoft.Insights/components)  Builder Keywords    Keyword Purpose     name Sets the name of the App Insights instance.    Configuration Members    Member Purpose     InstrumentationKey Gets the ARM expression path to the instrumentation key of this App Insights instance.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/functions/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/functions/</guid>
      <description>Overview The Functions builder is used to create Azure Functions accounts. It abstracts the App Host and Service Plan into the same component, and will also create and configure a linked App Insights resource. In addition, it will automatically create a backing storage account required by the functions runtime.
 Web Site (Microsoft.Web/sites) Web Host (Microsoft.Web/serverfarms) Application Insights (Microsoft.Insights/components) Site Extension (siteextensions) Storage Accounts (Microsoft.Storage/storageAccounts)  Builder Keywords    Keyword Purpose     name Sets the name of the functions instance.</description>
    </item>
    
    <item>
      <title>Deploying to Azure</title>
      <link>https://compositionalit.github.io/farmer/quickstarts/quickstart-3/</link>
      <pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-3/</guid>
      <description>Introduction In this exercise, you&amp;rsquo;ll update the application to deploy the generated ARM template to Azure directly from Farmer.
 Farmer generates normal ARM templates. You use all of the standard mechanisms for deploying ARM templates such as through the portal, Powershell, .NET or Azure CLI etc. This tutorial shows you a simple way to deploy templates from your development machine directly from within F#.
 Install the Azure CLI If you haven&amp;rsquo;t done so already, install the Azure CLI on your machine.</description>
    </item>
    
    <item>
      <title>ARM Expressions</title>
      <link>https://compositionalit.github.io/farmer/api-overview/expressions/</link>
      <pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/expressions/</guid>
      <description>ARM template expressions are a way of safely storing string values which contain expressions that are evaluated at deployment time by the Azure. ARM expressions can also contain a set of predefined functions supported by the ARM runtime.
Farmer understands how to use ARM expressions and provides functionality to correctly wrap and unwrap them as raw strings into a JSON template.
 For manipulation of literal values that are known on the client, you will not need to use ARM expressions.</description>
    </item>
    
    <item>
      <title>Cosmos DB</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/cosmosdb/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/cosmosdb/</guid>
      <description>Overview The CosmosDb package containers two builders, used to create CosmosDB databases and containers. There is only support document databases (that support so-called &amp;ldquo;SQL&amp;rdquo; queries), with support for Graph, Table and Cassandra data models planned.
Cosmos DB Builder The CosmosDB builder abstracts the idea of server and database into one. This simplfication means that at present there is only support for a single database for each Cosmos server that you create.</description>
    </item>
    
    <item>
      <title>SQL Azure</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/sql/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/sql/</guid>
      <description>Overview The SQL Azure builder is used to called SQL Azure servers and databases. It supports features such as encryption and firewalls. Every SQL Azure instance you create will automatically create a SecureString parameter for the admin account password.
Builder Keywords    Keyword Purpose     server_name Sets the name of the SQL server.   db_name Sets the name of the database.   sku Sets the sku of the database.</description>
    </item>
    
    <item>
      <title>The Farmer .NET Template</title>
      <link>https://compositionalit.github.io/farmer/quickstarts/template/</link>
      <pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/quickstarts/template/</guid>
      <description>Farmer comes with a .NET template that makes getting started easy.
Creating a basic Farmer app The easiest way to create a Farmer app is to use the Farmer Template.
dotnet new -i Farmer.Templatedotnet new Farmer You only have to install the template once on your machine!
 This creates a new dotnet application solution and project that looks by default as follows:
open Farmeropen Farmer.Resourceslet deployment = arm {location NorthEurope}printf &amp;#34;Generating ARM template.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/search/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/search/</guid>
      <description>Overview The Search builder creates storage accounts and their associated containers.
 Search (Microsoft.Search/searchServices)  Builder Keywords    Keyword Purpose     name Sets the name of the Azure Search instance.   sku Sets the sku of the Azure Search instance.   replicas Sets the replica count of the Azure Search instance.   partitions Sets the number of partitions of the Azure Search instance.</description>
    </item>
    
    <item>
      <title>Virtual Machine</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/virtual-machine/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/virtual-machine/</guid>
      <description>Overview The Virtual Machine builder creates a fully configured virtual machine and all its required child resources.
 Virtual Machines (Microsoft.Compute/virtualMachines) Virtual Networks (Microsoft.Network/virtualNetworks) IP Addresses (Microsoft.Network/publicIPAddresses) Network Interfaces (Microsoft.Network/networkInterfaces) Storage Accounts (Microsoft.Storage/storageAccounts)  In addition, every VM you create will add a SecureString parameter to the ARM template, whose name follows the pattern password-for-[virtual machine name].
Builder Keywords    Keyword Purpose     name Sets the name of the VM.</description>
    </item>
    
    <item>
      <title>Key Vault</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/keyvault/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/keyvault/</guid>
      <description>Overview The KeyVault package contains three builders, for the different components used by KeyVault: One for access policies, one for secrets, and one for the overall keyvault container.
 KeyVault (Microsoft.KeyVault/vaults) Secrets (Microsoft.KeyVault/vaults/secrets)  Secret Builder The secret builder allows you to store secrets into key vault. Values for a secret are passed by Secure String parameters.
   Keyword Purpose     name Sets the name of the secret.</description>
    </item>
    
    <item>
      <title>Event Hub</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/eventhub/</link>
      <pubDate>Sun, 23 Feb 2020 20:00:00 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/eventhub/</guid>
      <description>Overview The Event Hub builder creates event hub namespaces, event hubs, consumer groups and authorization rules in a single builder.
 Event Hub Namespace (Microsoft.EventHub/namespaces) Event Hub (Microsoft.EventHub/namespaces/eventhubs) Consumer Group (Microsoft.EventHub/namespaces/eventhubs/consumergroups) Authorization Rule (Microsoft.EventHub/namespaces/eventhubs/AuthorizationRules&amp;quot;)   The Event Hub builder works in a similar fashion to the web app builder in that it automatically creates the host (in this case, the event hub namespace) when creating the event hub. If you wish to create multiple hubs in the same namespace, configure the namespace-level properties in the first event hub; subsequent event hubs should link to the namespace of the hub created by the first hub.</description>
    </item>
    
    <item>
      <title>Redis Cache</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/redis/</link>
      <pubDate>Sun, 23 Feb 2020 20:00:00 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/redis/</guid>
      <description>Overview The Redis builder creates managed Redis Cache accounts.
 Redis (Microsoft.Cache/redis)  Builder Keywords    Keyword Purpose     name Sets the name of the Redis cache instance.   sku Sets the sku of the Redis cache instance.   capacity Sets the capacity level of the Redis cache instance, should be between 1-6 - see here.   enable_non_ssl_port Enabled access to the cache over the non-SSL port.</description>
    </item>
    
    <item>
      <title>ARM Deployment</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/arm/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/arm/</guid>
      <description>Overview The ARM deployment builder is always the top-level element of your deployment. It contains the manifest of all Farmer resources that you create.
Builder Keywords    Keyword Purpose     location Sets the default location of all resources.   add_resource Adds a resource to the template.   add_resources Adds a collection of resources to the template.   output Creates an output value that will be returned by the ARM template.</description>
    </item>
    
  </channel>
</rss>