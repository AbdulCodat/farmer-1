<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Farmer</title>
    <link>https://compositionalit.github.io/farmer/</link>
    <description>Recent content on Farmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Tue, 04 Feb 2020 00:36:21 +0100</lastBuildDate>
    
	<atom:link href="https://compositionalit.github.io/farmer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Generating templates</title>
      <link>https://compositionalit.github.io/farmer/api-overview/writer/</link>
      <pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/writer/</guid>
      <description>Farmer supports several ways to &amp;ldquo;output&amp;rdquo; ARM templates.
Generating JSON as string You can generate an ARM template as a plain string:
let json =deployment.Template|&amp;gt; Writer.toJson// prints out the JSON printfn &amp;#34;%s&amp;#34; jsonWriting to a file You can also write out the JSON directly to a file:
// myTemplate.jsonlet filename =deployment.Template|&amp;gt; Writer.toJson|&amp;gt; Writer.toFile &amp;#34;myTemplate&amp;#34; Notice how we use F#&amp;lsquo;s pipe operator to &amp;ldquo;pipe&amp;rdquo; data from the template configuration into json before writing to a file.</description>
    </item>
    
    <item>
      <title>Storage Account</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/storage-account/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/storage-account/</guid>
      <description>Overview The Storage Account builder creates storage accounts and their associated containers.
 Storage Accounts (Microsoft.Storage/storageAccounts) Storage Containers (blobServices/containers)  Builder Keywords    Keyword Purpose     name Specifies the name of the storage account   sku Sets the SKU of the storage account   add_public_container Adds a general-purpose public storage container   add_private_container Adds a general-purpose private storage container   add_blob_container Adds a general-purpose private blob container    Configuration Members    Member Purpose     Key Returns an ARM expression to retrieve the storage account&amp;rsquo;s primary connection string.</description>
    </item>
    
    <item>
      <title>Your first Farmer template</title>
      <link>https://compositionalit.github.io/farmer/quickstarts/quickstart-1/</link>
      <pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-1/</guid>
      <description>Introduction In this exercise, you&amp;rsquo;ll:
 create a web application with a fully-configured Application Insights instance create an ARM deployment object and assign the web app to it generate an ARM template  Creating a web app Create an F# console application using the .NET SDK:
dotnet new console -lang F# -n FarmerSampleAdd a reference to the Farmer nuget package by modifying the FarmerSample.fsproj as follows:
&amp;lt;PackageReference Include=&amp;#34;Farmer&amp;#34; Version=&amp;#34;0.3.0&amp;#34;/&amp;gt;Build the project to download the dependency.</description>
    </item>
    
    <item>
      <title>Web App</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/web-app/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/web-app/</guid>
      <description>Overview The Web App builder is used to create Azure App Service accounts. It abstracts the Service Plan into the same component, and will also create and configure a linked App Insights resource.
 Web Site (Microsoft.Web/sites) Web Host (Microsoft.Web/serverfarms) Application Insights (Microsoft.Insights/components) Site Extension (siteextensions)  Builder Keywords    Keyword Purpose     name Sets the name of the web app.   service_plan_name Sets the name of the service plan.</description>
    </item>
    
    <item>
      <title>Creating a linked resource</title>
      <link>https://compositionalit.github.io/farmer/quickstarts/quickstart-2/</link>
      <pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-2/</guid>
      <description>Introduction In this quickstart, you&amp;rsquo;ll expand on the deployment authored in the previous quickstart as follows:
 add an Azure storage account add an application setting to the web app that references the storage account&amp;rsquo;s key set a dependency between the two resources  Creating a storage account Create a storage account by using the storageAccount builder.
let myStorage = storageAccount {name &amp;#34;yourfirststorage&amp;#34;} Azure Storage Account names must be globally unique and between 3-24 alphanumeric lower-case characters:</description>
    </item>
    
    <item>
      <title>Parameters and Variables</title>
      <link>https://compositionalit.github.io/farmer/api-overview/parameters/</link>
      <pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/parameters/</guid>
      <description>ARM templates support the idea both of parameterisation of templates and of the use of variables within a template for e.g. placeholders and re-using values.
Farmer, by design, has only limited support for parameters and no support for variables. We don&amp;rsquo;t plan on adding rich support for either of these for the following reasons:
 We want to keep the Farmer codebase simple for maintainers We want to keep the Farmer API simple for users We want to keep the generated ARM templates as readable as possible We feel that instead of trying to embed conditional logic and program flow directly inside ARM templates in JSON, if you wish to parameterise your template that you should use a real programming language to do that: in this case, F#.</description>
    </item>
    
    <item>
      <title>App Insights</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/app-insights/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/app-insights/</guid>
      <description>Overview The App Insights builder is used to create Application Insights accounts. Use this if you need a standalone AI instance; if you need one for a web app, the web app will create one by default and configure the application settings automatically.
 Application Insights (Microsoft.Insights/components)  Builder Keywords    Keyword Purpose     name Sets the name of the App Insights instance.    Configuration Members    Member Purpose     InstrumentationKey Gets the ARM expression path to the instrumentation key of this App Insights instance.</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/functions/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/functions/</guid>
      <description>Overview The Functions builder is used to create Azure Functions accounts. It abstracts the App Host and Service Plan into the same component, and will also create and configure a linked App Insights resource. In addition, it will automatically create a backing storage account required by the functions runtime.
 Web Site (Microsoft.Web/sites) Web Host (Microsoft.Web/serverfarms) Application Insights (Microsoft.Insights/components) Site Extension (siteextensions) Storage Accounts (Microsoft.Storage/storageAccounts)  Builder Keywords    Keyword Purpose     name Sets the name of the functions instance.</description>
    </item>
    
    <item>
      <title>Deploying a Farmer template</title>
      <link>https://compositionalit.github.io/farmer/quickstarts/quickstart-3/</link>
      <pubDate>Tue, 04 Feb 2020 00:41:51 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/quickstarts/quickstart-3/</guid>
      <description>Introduction In this exercise, you&amp;rsquo;ll update the application to deploy the generated ARM template to Azure directly from Farmer.
 Farmer generates normal ARM templates. You use all of the standard mechanisms for deploying ARM templates such as through the portal, Powershell, .NET or Azure CLI etc. This tutorial shows you a simple way to deploy templates from your development machine directly from within F#.
 Install the Azure CLI If you haven&amp;rsquo;t done so already, install the Azure CLI on your machine.</description>
    </item>
    
    <item>
      <title>ARM Expressions</title>
      <link>https://compositionalit.github.io/farmer/api-overview/expressions/</link>
      <pubDate>Wed, 05 Feb 2020 09:13:36 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/expressions/</guid>
      <description>ARM template expressions are a way of safely storing string values which contain expressions that are evaluated at deployment time by the Azure. ARM expressions can also contain a set of predefined functions supported by the ARM runtime.
Farmer understands how to use ARM expressions and provides functionality to correctly wrap and unwrap them as raw strings into a JSON template.
 For manipulation of literal values that are known on the client, you will not need to use ARM expressions.</description>
    </item>
    
    <item>
      <title>Search</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/search/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/search/</guid>
      <description>Overview The Search builder creates storage accounts and their associated containers.
 Search (Microsoft.Search/searchServices)  Builder Keywords    Keyword Purpose     name Sets the name of the Azure Search instance.   sku Sets the sku of the Azure Search instance.   replicas Sets the replica count of the Azure Search instance.   partitions Sets the number of partitions of the Azure Search instance.</description>
    </item>
    
    <item>
      <title>Virtual Machine</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/virtual-machine/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/virtual-machine/</guid>
      <description>Overview The Virtual Machine builder creates a fully configured virtual machine and all its required child resources.
 Virtual Machines (Microsoft.Compute/virtualMachines) Virtual Networks (Microsoft.Network/virtualNetworks) IP Addresses (Microsoft.Network/publicIPAddresses) Network Interfaces (Microsoft.Network/networkInterfaces) Storage Accounts (Microsoft.Storage/storageAccounts)  In addition, every VM you create will add a SecureString parameter to the ARM template, whose name follows the pattern password-for-[virtual machine name].
Builder Keywords    Keyword Purpose     name Sets the name of the VM.</description>
    </item>
    
    <item>
      <title>Key Vault</title>
      <link>https://compositionalit.github.io/farmer/api-overview/resources/keyvault/</link>
      <pubDate>Wed, 05 Feb 2020 08:53:46 +0100</pubDate>
      
      <guid>https://compositionalit.github.io/farmer/api-overview/resources/keyvault/</guid>
      <description>Overview The KeyVault package contains three builders, for the different components used by KeyVault: One for access policies, one for secrets, and one for the overall keyvault container.
 KeyVault (Microsoft.KeyVault/vaults) Secrets (Microsoft.KeyVault/vaults/secrets)  Secret Builder The secret builder allows you to store secrets into key vault. Values for a secret are passed by Secure String parameters.
   Keyword Purpose     name Sets the name of the secret.</description>
    </item>
    
  </channel>
</rss>