<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Farmer</title><link>https://compositionalit.github.io/farmer/tutorials/</link><description>Recent content in Tutorials on Farmer</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 24 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://compositionalit.github.io/farmer/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Cosmos-backed Web App</title><link>https://compositionalit.github.io/farmer/tutorials/cosmos-backed-webapp/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/cosmos-backed-webapp/</guid><description>Introduction In this exercise, you&amp;rsquo;ll:
create a Cosmos DB account with a single database create a web application with an automatically configured app insights instance configure the web application to have connection settings required to connect to the cosmos DB Full code available here
Create the CosmosDB instance Create a CosmosDB instance using the cosmosDb builder:
open Farmer open Farmer.Builders open Farmer.CosmosDb let theDatabase = cosmosDb { name &amp;#34;Tasks&amp;#34; account_name &amp;#34;isaac-to-do-app-cosmos&amp;#34; consistency_policy Session } Create and configure a web app Create a web application, and provide settings that are derived from the Cosmos DB instance that you just created.</description></item><item><title>Serverless ETL</title><link>https://compositionalit.github.io/farmer/tutorials/serverless-etl/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/serverless-etl/</guid><description>Introduction In this exercise, you&amp;rsquo;ll:
create am Azure Functions instance (with automatically configured storage account and app insights instances) create a SQL Azure instance configure the functions to have connection settings required to connect to both the Storage and SQL instances This may be a useful pattern for a code-first ETL e.g. you wish to react to data being created in a blob in Storage, parsing it, before inserting some data into SQL.</description></item></channel></rss>