<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on Farmer</title><link>https://compositionalit.github.io/farmer/tutorials/</link><description>Recent content in Tutorials on Farmer</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Sat, 24 Oct 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://compositionalit.github.io/farmer/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Cosmos-backed Web App</title><link>https://compositionalit.github.io/farmer/tutorials/cosmos-backed-webapp/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/cosmos-backed-webapp/</guid><description>Introduction This tutorial walks you through creating a web application which is backed by a Cosmos DB database, and is fully configured with connection string settings for you to start developing against. We&amp;rsquo;ll cover the following steps:
Creating a Cosmos DB account with a single database. Creating a web application with an automatically configured app insights instance. Configuring the web application to have the connection settings required to connect to the Cosmos DB instance.</description></item><item><title>Multiple web apps</title><link>https://compositionalit.github.io/farmer/tutorials/multiple-web-apps/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/multiple-web-apps/</guid><description>Introduction This tutorial walks you through creating multiple web applications that will share a common web server. We&amp;rsquo;ll cover the following steps:
Creating a web app. Creating multiple web apps and &amp;ldquo;sharing&amp;rdquo; the first web app&amp;rsquo;s service plan and Application Insights instances. How to use F#&amp;lsquo;s list comprehensions to rapidly creating multiple websites. Full code available here
Creating a single web app Create a standard web app as normal:</description></item><item><title>Serverless ETL</title><link>https://compositionalit.github.io/farmer/tutorials/serverless-etl/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/serverless-etl/</guid><description>Introduction This tutorial shows how to create the infrastructure required to implement a common pattern for code-first &amp;ldquo;extract-transform-load&amp;rdquo; (ETL) processes. In this tutorial, imagine you wish to react to data being created in a blob in Storage, then parse it, and finally insert the &amp;ldquo;parsed&amp;rdquo; data into SQL in a relational database for use by e.g. a web application. We&amp;rsquo;ll cover the following steps:
Creating an Azure Functions instance, with automatically configured storage and app insights instances.</description></item><item><title>Web App Secrets with KeyVault</title><link>https://compositionalit.github.io/farmer/tutorials/web-storage-keyvault/</link><pubDate>Sat, 24 Oct 2020 00:00:00 +0000</pubDate><guid>https://compositionalit.github.io/farmer/tutorials/web-storage-keyvault/</guid><description>Introduction This tutorial shows how to create the infrastructure required to host a web app which can retrieve secrets from a secure store (Keyvault) using Azure identity. In this tutorial, we&amp;rsquo;ll store the key for a storage account in Keyvault, but it could be anything. We&amp;rsquo;ll cover the following steps:
Creating a Web App, Storage Account and a KeyVault instance. Safely adding the Storage Account key into KeyVault. Granting a read-only trust between KeyVault and the Web App.</description></item></channel></rss>